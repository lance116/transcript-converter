-- Supabase Schema for PreferenceSummarizer
-- Run this SQL in your Supabase SQL Editor to create the required table

-- Create transcripts table
CREATE TABLE IF NOT EXISTS public.transcripts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  transcript_text TEXT NOT NULL,
  preference_summary TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Create index on created_at for faster sorting
CREATE INDEX IF NOT EXISTS idx_transcripts_created_at
ON public.transcripts(created_at DESC);

-- Enable Row Level Security (RLS)
ALTER TABLE public.transcripts ENABLE ROW LEVEL SECURITY;

-- Create policy to allow public read access (optional - adjust based on your needs)
CREATE POLICY "Allow public read access"
ON public.transcripts
FOR SELECT
USING (true);

-- Create policy to allow public insert access (optional - adjust based on your needs)
CREATE POLICY "Allow public insert access"
ON public.transcripts
FOR INSERT
WITH CHECK (true);

-- Optional: Add a policy to prevent updates and deletes if you want immutable records
CREATE POLICY "Prevent updates"
ON public.transcripts
FOR UPDATE
USING (false);

CREATE POLICY "Prevent deletes"
ON public.transcripts
FOR DELETE
USING (false);

-- Add comments for documentation
COMMENT ON TABLE public.transcripts IS 'Stores Google Meet transcripts and their AI-generated preference summaries';
COMMENT ON COLUMN public.transcripts.id IS 'Unique identifier for each transcript analysis';
COMMENT ON COLUMN public.transcripts.transcript_text IS 'Raw Google Meet transcript text';
COMMENT ON COLUMN public.transcripts.preference_summary IS 'AI-generated customer preference summary';
COMMENT ON COLUMN public.transcripts.created_at IS 'Timestamp when the analysis was created';

-- Create generated_posts table
CREATE TABLE IF NOT EXISTS public.generated_posts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  transcript_id UUID NOT NULL REFERENCES public.transcripts(id) ON DELETE CASCADE,
  post_content TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Create index on transcript_id for faster lookups
CREATE INDEX IF NOT EXISTS idx_generated_posts_transcript_id
ON public.generated_posts(transcript_id);

-- Enable Row Level Security (RLS)
ALTER TABLE public.generated_posts ENABLE ROW LEVEL SECURITY;

-- Create policy to allow public read access
CREATE POLICY "Allow public read access"
ON public.generated_posts
FOR SELECT
USING (true);

-- Create policy to allow public insert access
CREATE POLICY "Allow public insert access"
ON public.generated_posts
FOR INSERT
WITH CHECK (true);

-- Add comments for documentation
COMMENT ON TABLE public.generated_posts IS 'Stores LinkedIn posts generated by Agent 2 based on preference summaries';
COMMENT ON COLUMN public.generated_posts.id IS 'Unique identifier for each generated post';
COMMENT ON COLUMN public.generated_posts.transcript_id IS 'Reference to the transcript that led to this post';
COMMENT ON COLUMN public.generated_posts.post_content IS 'Generated LinkedIn post content';
COMMENT ON COLUMN public.generated_posts.created_at IS 'Timestamp when the post was generated';

-- Create iterations table
CREATE TABLE IF NOT EXISTS public.iterations (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  post_id UUID NOT NULL REFERENCES public.generated_posts(id) ON DELETE CASCADE,
  user_message TEXT NOT NULL,
  revised_post TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Create index on post_id for faster lookups
CREATE INDEX IF NOT EXISTS idx_iterations_post_id
ON public.iterations(post_id);

-- Create index on created_at for chronological ordering
CREATE INDEX IF NOT EXISTS idx_iterations_created_at
ON public.iterations(created_at ASC);

-- Enable Row Level Security (RLS)
ALTER TABLE public.iterations ENABLE ROW LEVEL SECURITY;

-- Create policy to allow public read access
CREATE POLICY "Allow public read access"
ON public.iterations
FOR SELECT
USING (true);

-- Create policy to allow public insert access
CREATE POLICY "Allow public insert access"
ON public.iterations
FOR INSERT
WITH CHECK (true);

-- Add comments for documentation
COMMENT ON TABLE public.iterations IS 'Stores iteration messages and revised posts from Agent 3';
COMMENT ON COLUMN public.iterations.id IS 'Unique identifier for each iteration';
COMMENT ON COLUMN public.iterations.post_id IS 'Reference to the post being iterated on';
COMMENT ON COLUMN public.iterations.user_message IS 'User feedback/request for revision';
COMMENT ON COLUMN public.iterations.revised_post IS 'AI-revised post based on user feedback';
COMMENT ON COLUMN public.iterations.created_at IS 'Timestamp when the iteration was created';
